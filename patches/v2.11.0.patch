diff --git a/build.gradle b/build.gradle
index 273ca6f21..5259c5244 100644
--- a/build.gradle
+++ b/build.gradle
@@ -13,8 +13,8 @@ allprojects {
 	apply plugin: "java"
 	apply plugin: "net.ltgt.errorprone"
 
-	sourceCompatibility = 14
-	targetCompatibility = 14
+	sourceCompatibility = 11
+	targetCompatibility = 11
 
 	repositories {
 		mavenCentral()
diff --git a/examples/build.gradle b/examples/build.gradle
index 597f1583a..b0f3475fd 100644
--- a/examples/build.gradle
+++ b/examples/build.gradle
@@ -10,8 +10,8 @@ dependencies {
 }
 
 java {
-	sourceCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
-	targetCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
+	sourceCompatibility = org.gradle.api.JavaVersion.VERSION_11
+	targetCompatibility = org.gradle.api.JavaVersion.VERSION_11
 }
 
 tasks.addRule("Pattern: run<Example>: Runs an example.") { String taskName ->
diff --git a/examples/src/main/java/TopicWithAdminKeyExample.java b/examples/src/main/java/TopicWithAdminKeyExample.java
index 70b2d4cb5..98c344989 100644
--- a/examples/src/main/java/TopicWithAdminKeyExample.java
+++ b/examples/src/main/java/TopicWithAdminKeyExample.java
@@ -12,7 +12,7 @@ import com.hedera.hashgraph.sdk.TopicUpdateTransaction;
 import com.hedera.hashgraph.sdk.Transaction;
 import com.hedera.hashgraph.sdk.TransactionResponse;
 import io.github.cdimascio.dotenv.Dotenv;
-import java8.util.J8Arrays;
+import java.util.Arrays;
 
 import javax.annotation.Nullable;
 import java.util.Collections;
@@ -68,7 +68,7 @@ class TopicWithAdminKeyExample {
         // Generate the initial keys that are part of the adminKey's thresholdKey.
         // 3 ED25519 keys part of a 2-of-3 threshold key.
         initialAdminKeys = new PrivateKey[3];
-        J8Arrays.setAll(initialAdminKeys, i -> PrivateKey.generate());
+        Arrays.setAll(initialAdminKeys, i -> PrivateKey.generate());
 
         KeyList thresholdKey = KeyList.withThreshold(2);
         Collections.addAll(thresholdKey, initialAdminKeys);
@@ -79,7 +79,7 @@ class TopicWithAdminKeyExample {
             .freezeWith(hapiClient);
 
         // Sign the transaction with 2 of 3 keys that are part of the adminKey threshold key.
-        J8Arrays.stream(initialAdminKeys, 0, 2).forEach(k -> {
+        Arrays.stream(initialAdminKeys, 0, 2).forEach(k -> {
             System.out.println("Signing ConsensusTopicCreateTransaction with key " + k);
             transaction.sign(k);
         });
@@ -95,7 +95,7 @@ class TopicWithAdminKeyExample {
         // Generate the new keys that are part of the adminKey's thresholdKey.
         // 4 ED25519 keys part of a 3-of-4 threshold key.
         PrivateKey[] newAdminKeys = new PrivateKey[4];
-        J8Arrays.setAll(newAdminKeys, i -> PrivateKey.generate());
+        Arrays.setAll(newAdminKeys, i -> PrivateKey.generate());
 
         KeyList thresholdKey = KeyList.withThreshold(3);
         Collections.addAll(thresholdKey, newAdminKeys);
@@ -107,13 +107,13 @@ class TopicWithAdminKeyExample {
             .freezeWith(hapiClient);
 
         // Sign with the initial adminKey. 2 of the 3 keys already part of the topic's adminKey.
-        J8Arrays.stream(initialAdminKeys, 0, 2).forEach(k -> {
+        Arrays.stream(initialAdminKeys, 0, 2).forEach(k -> {
             System.out.println("Signing ConsensusTopicUpdateTransaction with initial admin key " + k);
             transaction.sign(k);
         });
 
         // Sign with the new adminKey. 3 of 4 keys already part of the topic's adminKey.
-        J8Arrays.stream(newAdminKeys, 0, 3).forEach(k -> {
+        Arrays.stream(newAdminKeys, 0, 3).forEach(k -> {
             System.out.println("Signing ConsensusTopicUpdateTransaction with new admin key " + k);
             transaction.sign(k);
         });
diff --git a/executable-annotation/build.gradle b/executable-annotation/build.gradle
index b253af69b..8c86b867a 100644
--- a/executable-annotation/build.gradle
+++ b/executable-annotation/build.gradle
@@ -1,2 +1,2 @@
-sourceCompatibility = 8
-targetCompatibility = 8
+sourceCompatibility = 11
+targetCompatibility = 11
diff --git a/executable-processor/src/main/java/com/hedera/hashgraph/sdk/FunctionalExecutableProcessor.java b/executable-processor/src/main/java/com/hedera/hashgraph/sdk/FunctionalExecutableProcessor.java
index 7004fd474..0b54fa3c7 100644
--- a/executable-processor/src/main/java/com/hedera/hashgraph/sdk/FunctionalExecutableProcessor.java
+++ b/executable-processor/src/main/java/com/hedera/hashgraph/sdk/FunctionalExecutableProcessor.java
@@ -5,9 +5,9 @@ import com.squareup.javapoet.JavaFile;
 import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeVariableName;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.function.BiConsumer;
-import java8.util.function.Consumer;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
 import org.threeten.bp.Duration;
 
 import javax.annotation.processing.AbstractProcessor;
@@ -29,7 +29,7 @@ import static com.squareup.javapoet.TypeSpec.interfaceBuilder;
 
 @SuppressWarnings({"AndroidJdkLibsChecker", "Java7ApiChecker"})
 @SupportedAnnotationTypes("com.hedera.hashgraph.sdk.FunctionalExecutable")
-@SupportedSourceVersion(SourceVersion.RELEASE_8)
+@SupportedSourceVersion(SourceVersion.RELEASE_11)
 public class FunctionalExecutableProcessor extends AbstractProcessor {
     @Override
     public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
diff --git a/sdk/build.gradle b/sdk/build.gradle
index 9ba2bb49a..952344058 100644
--- a/sdk/build.gradle
+++ b/sdk/build.gradle
@@ -43,6 +43,8 @@ dependencies {
 	implementation "io.grpc:grpc-core:1.45.0"
 	implementation "io.grpc:grpc-protobuf-lite:1.45.0"
 	implementation "io.grpc:grpc-stub:1.45.0"
+    implementation "org.slf4j:slf4j-nop:1.7.36"
+    implementation "io.grpc:grpc-netty-shaded:1.44.1"
 
 	testCompile "org.assertj:assertj-core:3.22.0"
 	testImplementation "org.junit.jupiter:junit-jupiter-engine:5.8.2"
@@ -102,7 +104,7 @@ tasks.withType(JavaCompile).configureEach {
 	compileJava {
 		options.compilerArgs += [
 			"--release",
-			"8" // Avoid using Java 12 APIs
+			"11" // Avoid using Java 12 APIs
 		]
 	}
 }
@@ -235,3 +237,16 @@ nexus {
 	sign = true
 	repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
 }
+
+task uberJar(type: Jar) {
+    archiveClassifier = 'uber'
+    from sourceSets.main.output
+    dependsOn configurations.runtimeClasspath
+    from {
+        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
+    }{
+        exclude 'META-INF/*.SF'
+        exclude 'META-INF/*.DSA'
+        exclude 'META-INF/*.RSA'
+    }
+}
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfo.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfo.java
index c6373e487..582846167 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfo.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfo.java
@@ -3,8 +3,8 @@ package com.hedera.hashgraph.sdk;
 import com.google.common.base.MoreObjects;
 import com.google.protobuf.InvalidProtocolBufferException;
 import com.hedera.hashgraph.sdk.proto.CryptoGetInfoResponse;
-import java8.util.J8Arrays;
-import java8.util.stream.Collectors;
+import java.util.Arrays;
+import java.util.stream.Collectors;
 import org.threeten.bp.Duration;
 import org.threeten.bp.Instant;
 
@@ -170,7 +170,7 @@ public final class AccountInfo {
             ? AccountId.fromProtobuf(accountInfo.getProxyAccountID())
             : null;
 
-        var liveHashes = J8Arrays.stream(accountInfo.getLiveHashesList().toArray())
+        var liveHashes = Arrays.stream(accountInfo.getLiveHashesList().toArray())
             .map((liveHash) -> LiveHash.fromProtobuf((com.hedera.hashgraph.sdk.proto.LiveHash) liveHash))
             .collect(Collectors.toList());
 
@@ -230,7 +230,7 @@ public final class AccountInfo {
     }
 
     CryptoGetInfoResponse.AccountInfo toProtobuf() {
-        var hashes = J8Arrays.stream(liveHashes.toArray())
+        var hashes = Arrays.stream(liveHashes.toArray())
             .map((liveHash) -> ((LiveHash) liveHash).toProtobuf())
             .collect(Collectors.toList());
 
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoFlow.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoFlow.java
index cefb9f97b..04a2797fb 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoFlow.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoFlow.java
@@ -1,6 +1,6 @@
 package com.hedera.hashgraph.sdk;
 
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.TimeoutException;
 
 public class AccountInfoFlow {
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoQuery.java
index e23046d3e..70687c6d7 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoQuery.java
@@ -6,7 +6,7 @@ import com.hedera.hashgraph.sdk.proto.QueryHeader;
 import com.hedera.hashgraph.sdk.proto.Response;
 import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.Objects;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/AddressBookQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/AddressBookQuery.java
index ebbe9a273..25bcdd910 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/AddressBookQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/AddressBookQuery.java
@@ -8,7 +8,7 @@ import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
 import io.grpc.stub.ClientCalls;
 import io.grpc.stub.StreamObserver;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.threeten.bp.Duration;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ChunkedTransaction.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ChunkedTransaction.java
index 3664f61e7..c3fd18bd1 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ChunkedTransaction.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ChunkedTransaction.java
@@ -7,9 +7,9 @@ import com.hedera.hashgraph.sdk.proto.SignatureMap;
 import com.hedera.hashgraph.sdk.proto.SignedTransaction;
 import com.hedera.hashgraph.sdk.proto.TransactionBody;
 import com.hedera.hashgraph.sdk.proto.TransactionID;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.concurrent.CompletionStage;
-import java8.util.function.Function;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletionStage;
+import java.util.function.Function;
 
 import javax.annotation.Nullable;
 import java.util.ArrayList;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/Client.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/Client.java
index 3bb7c08c1..21a962028 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/Client.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/Client.java
@@ -4,10 +4,9 @@ import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.google.gson.Gson;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonParseException;
-import java8.util.Lists;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.function.Consumer;
-import java8.util.function.Function;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.Consumer;
+import java.util.function.Function;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.threeten.bp.Duration;
@@ -246,13 +245,13 @@ public final class Client implements AutoCloseable, WithPing, WithPingAll {
                 String mirror = config.mirrorNetwork.getAsString();
                 switch (mirror) {
                     case "mainnet":
-                        client.setMirrorNetwork(Lists.of("hcs.mainnet.mirrornode.hedera.com:5600"));
+                        client.setMirrorNetwork(List.of("hcs.mainnet.mirrornode.hedera.com:5600"));
                         break;
                     case "testnet":
-                        client.setMirrorNetwork(Lists.of("hcs.testnet.mirrornode.hedera.com:5600"));
+                        client.setMirrorNetwork(List.of("hcs.testnet.mirrornode.hedera.com:5600"));
                         break;
                     case "previewnet":
-                        client.setMirrorNetwork(Lists.of("hcs.previewnet.mirrornode.hedera.com:5600"));
+                        client.setMirrorNetwork(List.of("hcs.previewnet.mirrornode.hedera.com:5600"));
                         break;
                     default:
                         throw new JsonParseException("Illegal argument for mirrorNetwork.");
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCallQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCallQuery.java
index 90fad20dd..3f0267671 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCallQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCallQuery.java
@@ -7,7 +7,7 @@ import com.hedera.hashgraph.sdk.proto.Response;
 import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import com.hedera.hashgraph.sdk.proto.SmartContractServiceGrpc;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.Objects;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCreateFlow.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCreateFlow.java
index 4a9debe89..b024cb8be 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCreateFlow.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCreateFlow.java
@@ -1,7 +1,7 @@
 package com.hedera.hashgraph.sdk;
 
 import com.google.protobuf.ByteString;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 import org.bouncycastle.util.encoders.Hex;
 import org.threeten.bp.Duration;
 
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionParameters.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionParameters.java
index a40dcd415..0089e0206 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionParameters.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionParameters.java
@@ -2,11 +2,10 @@ package com.hedera.hashgraph.sdk;
 
 import com.google.errorprone.annotations.Var;
 import com.google.protobuf.ByteString;
-import java8.util.J8Arrays;
-import java8.util.stream.Collectors;
-import java8.util.stream.IntStream;
-import java8.util.stream.IntStreams;
-import java8.util.stream.Stream;
+import java.util.Arrays;
+import java.util.stream.Collectors;
+import java.util.stream.IntStream;
+import java.util.stream.Stream;
 import org.bouncycastle.util.encoders.DecoderException;
 import org.bouncycastle.util.encoders.Hex;
 
@@ -217,7 +216,7 @@ public final class ContractFunctionParameters {
      * @throws NullPointerException if any value in `strings` is null
      */
     public ContractFunctionParameters addStringArray(String[] strings) {
-        List<ByteString> byteStrings = J8Arrays.stream(strings)
+        List<ByteString> byteStrings = Arrays.stream(strings)
             .map(ContractFunctionParameters::encodeString)
             .collect(Collectors.toList());
 
@@ -247,7 +246,7 @@ public final class ContractFunctionParameters {
      * @return {@code this}
      */
     public ContractFunctionParameters addBytesArray(byte[][] param) {
-        List<ByteString> byteArrays = J8Arrays.stream(param)
+        List<ByteString> byteArrays = Arrays.stream(param)
             .map(ContractFunctionParameters::encodeBytes)
             .collect(Collectors.toList());
 
@@ -282,7 +281,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addBytes32Array(byte[][] param) {
         // array of fixed-size elements
-        Stream<ByteString> byteArrays = J8Arrays.stream(param)
+        Stream<ByteString> byteArrays = Arrays.stream(param)
             .map(ContractFunctionParameters::encodeBytes32);
 
         args.add(new Argument("bytes32[]", encodeArray(byteArrays), true));
@@ -691,7 +690,7 @@ public final class ContractFunctionParameters {
      * @return {@code this}
      */
     public ContractFunctionParameters addInt8Array(byte[] intArray) {
-        IntStream intStream = IntStreams.range(0, intArray.length).map(idx -> intArray[idx]);
+        IntStream intStream = IntStream.range(0, intArray.length).map(idx -> intArray[idx]);
 
         @Var ByteString arrayBytes = ByteString.copyFrom(
             intStream.mapToObj(i -> int256(i, 8))
@@ -712,7 +711,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt16Array(int[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> int256(i, 16))
+            Arrays.stream(intArray).mapToObj(i -> int256(i, 16))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -730,7 +729,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt24Array(int[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> int256(i, 24))
+            Arrays.stream(intArray).mapToObj(i -> int256(i, 24))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -748,7 +747,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt32Array(int[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> int256(i, 32))
+            Arrays.stream(intArray).mapToObj(i -> int256(i, 32))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -766,7 +765,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt40Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> int256(i, 40))
+            Arrays.stream(intArray).mapToObj(i -> int256(i, 40))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -784,7 +783,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt48Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> int256(i, 48))
+            Arrays.stream(intArray).mapToObj(i -> int256(i, 48))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -802,7 +801,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt56Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> int256(i, 56))
+            Arrays.stream(intArray).mapToObj(i -> int256(i, 56))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -820,7 +819,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt64Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> int256(i, 64))
+            Arrays.stream(intArray).mapToObj(i -> int256(i, 64))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -838,7 +837,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt72Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 72))
+            Arrays.stream(intArray).map(i -> int256(i, 72))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -856,7 +855,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt80Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 80))
+            Arrays.stream(intArray).map(i -> int256(i, 80))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -874,7 +873,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt88Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 88))
+            Arrays.stream(intArray).map(i -> int256(i, 88))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -892,7 +891,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt96Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 96))
+            Arrays.stream(intArray).map(i -> int256(i, 96))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -910,7 +909,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt104Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 104))
+            Arrays.stream(intArray).map(i -> int256(i, 104))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -928,7 +927,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt112Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 112))
+            Arrays.stream(intArray).map(i -> int256(i, 112))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -946,7 +945,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt120Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 120))
+            Arrays.stream(intArray).map(i -> int256(i, 120))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -964,7 +963,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt128Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 128))
+            Arrays.stream(intArray).map(i -> int256(i, 128))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -982,7 +981,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt136Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 136))
+            Arrays.stream(intArray).map(i -> int256(i, 136))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1000,7 +999,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt144Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 144))
+            Arrays.stream(intArray).map(i -> int256(i, 144))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1018,7 +1017,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt152Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 152))
+            Arrays.stream(intArray).map(i -> int256(i, 152))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1036,7 +1035,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt160Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 160))
+            Arrays.stream(intArray).map(i -> int256(i, 160))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1054,7 +1053,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt168Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 168))
+            Arrays.stream(intArray).map(i -> int256(i, 168))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1072,7 +1071,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt176Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 176))
+            Arrays.stream(intArray).map(i -> int256(i, 176))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1090,7 +1089,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt184Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 184))
+            Arrays.stream(intArray).map(i -> int256(i, 184))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1108,7 +1107,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt192Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 192))
+            Arrays.stream(intArray).map(i -> int256(i, 192))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1126,7 +1125,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt200Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 200))
+            Arrays.stream(intArray).map(i -> int256(i, 200))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1144,7 +1143,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt208Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 208))
+            Arrays.stream(intArray).map(i -> int256(i, 208))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1162,7 +1161,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt216Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 216))
+            Arrays.stream(intArray).map(i -> int256(i, 216))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1180,7 +1179,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt224Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 224))
+            Arrays.stream(intArray).map(i -> int256(i, 224))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1198,7 +1197,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt232Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 232))
+            Arrays.stream(intArray).map(i -> int256(i, 232))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1216,7 +1215,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt240Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 240))
+            Arrays.stream(intArray).map(i -> int256(i, 240))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1234,7 +1233,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt248Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 248))
+            Arrays.stream(intArray).map(i -> int256(i, 248))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1252,7 +1251,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt256Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 256))
+            Arrays.stream(intArray).map(i -> int256(i, 256))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1774,7 +1773,7 @@ public final class ContractFunctionParameters {
      * @return {@code this}
      */
     public ContractFunctionParameters addUint8Array(byte[] intArray) {
-        IntStream intStream = IntStreams.range(0, intArray.length).map(idx -> intArray[idx]);
+        IntStream intStream = IntStream.range(0, intArray.length).map(idx -> intArray[idx]);
 
         @Var ByteString arrayBytes = ByteString.copyFrom(
             intStream.mapToObj(i -> uint256(i, 8))
@@ -1798,7 +1797,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint16Array(int[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> uint256(i, 16))
+            Arrays.stream(intArray).mapToObj(i -> uint256(i, 16))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1819,7 +1818,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint24Array(int[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> uint256(i, 24))
+            Arrays.stream(intArray).mapToObj(i -> uint256(i, 24))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1840,7 +1839,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint32Array(int[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> uint256(i, 32))
+            Arrays.stream(intArray).mapToObj(i -> uint256(i, 32))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1861,7 +1860,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint40Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> uint256(i, 40))
+            Arrays.stream(intArray).mapToObj(i -> uint256(i, 40))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1882,7 +1881,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint48Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> uint256(i, 48))
+            Arrays.stream(intArray).mapToObj(i -> uint256(i, 48))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1903,7 +1902,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint56Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> uint256(i, 56))
+            Arrays.stream(intArray).mapToObj(i -> uint256(i, 56))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1924,7 +1923,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint64Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> uint256(i, 64))
+            Arrays.stream(intArray).mapToObj(i -> uint256(i, 64))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1946,7 +1945,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint72Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 72))
+            Arrays.stream(intArray).map(i -> uint256(i, 72))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1968,7 +1967,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint80Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 80))
+            Arrays.stream(intArray).map(i -> uint256(i, 80))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1990,7 +1989,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint88Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 88))
+            Arrays.stream(intArray).map(i -> uint256(i, 88))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2012,7 +2011,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint96Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 96))
+            Arrays.stream(intArray).map(i -> uint256(i, 96))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2034,7 +2033,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint104Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 104))
+            Arrays.stream(intArray).map(i -> uint256(i, 104))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2056,7 +2055,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint112Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 112))
+            Arrays.stream(intArray).map(i -> uint256(i, 112))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2078,7 +2077,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint120Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 120))
+            Arrays.stream(intArray).map(i -> uint256(i, 120))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2100,7 +2099,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint128Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 128))
+            Arrays.stream(intArray).map(i -> uint256(i, 128))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2122,7 +2121,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint136Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 136))
+            Arrays.stream(intArray).map(i -> uint256(i, 136))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2144,7 +2143,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint144Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 144))
+            Arrays.stream(intArray).map(i -> uint256(i, 144))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2166,7 +2165,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint152Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 152))
+            Arrays.stream(intArray).map(i -> uint256(i, 152))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2188,7 +2187,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint160Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 160))
+            Arrays.stream(intArray).map(i -> uint256(i, 160))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2210,7 +2209,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint168Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 168))
+            Arrays.stream(intArray).map(i -> uint256(i, 168))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2232,7 +2231,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint176Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 176))
+            Arrays.stream(intArray).map(i -> uint256(i, 176))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2254,7 +2253,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint184Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 184))
+            Arrays.stream(intArray).map(i -> uint256(i, 184))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2276,7 +2275,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint192Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 192))
+            Arrays.stream(intArray).map(i -> uint256(i, 192))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2298,7 +2297,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint200Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 200))
+            Arrays.stream(intArray).map(i -> uint256(i, 200))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2320,7 +2319,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint208Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 208))
+            Arrays.stream(intArray).map(i -> uint256(i, 208))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2342,7 +2341,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint216Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 216))
+            Arrays.stream(intArray).map(i -> uint256(i, 216))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2364,7 +2363,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint224Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 224))
+            Arrays.stream(intArray).map(i -> uint256(i, 224))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2386,7 +2385,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint232Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 232))
+            Arrays.stream(intArray).map(i -> uint256(i, 232))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2408,7 +2407,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint240Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 240))
+            Arrays.stream(intArray).map(i -> uint256(i, 240))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2430,7 +2429,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint248Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 248))
+            Arrays.stream(intArray).map(i -> uint256(i, 248))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2452,7 +2451,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint256Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 256))
+            Arrays.stream(intArray).map(i -> uint256(i, 256))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2494,7 +2493,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addAddressArray(String[] addresses) {
         ByteString addressArray = encodeArray(
-            J8Arrays.stream(addresses).map(a -> {
+            Arrays.stream(addresses).map(a -> {
                 byte[] address = decodeAddress(a);
                 return leftPad32(ByteString.copyFrom(address));
             }));
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionResult.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionResult.java
index e450ed217..a64b7401a 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionResult.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionResult.java
@@ -4,8 +4,8 @@ import com.google.common.base.MoreObjects;
 import com.google.protobuf.ByteString;
 import com.google.protobuf.BytesValue;
 import com.hedera.hashgraph.sdk.proto.ContractFunctionResultOrBuilder;
-import java8.util.stream.Collectors;
-import java8.util.stream.StreamSupport;
+import java.util.stream.Collectors;
+import java.util.stream.StreamSupport;
 import org.bouncycastle.util.encoders.Hex;
 
 import javax.annotation.Nullable;
@@ -75,9 +75,9 @@ public final class ContractFunctionResult {
 
         gasUsed = inner.getGasUsed();
 
-        logs = StreamSupport.stream(inner.getLogInfoList()).map(ContractLogInfo::fromProtobuf).collect(Collectors.toList());
+        logs = StreamSupport.stream(inner.getLogInfoList().spliterator(), false).map(ContractLogInfo::fromProtobuf).collect(Collectors.toList());
 
-        createdContractIds = StreamSupport.stream(inner.getCreatedContractIDsList()).map(ContractId::fromProtobuf).collect(Collectors.toList());
+        createdContractIds = StreamSupport.stream(inner.getCreatedContractIDsList().spliterator(), false).map(ContractId::fromProtobuf).collect(Collectors.toList());
 
         stateChanges = new ArrayList<>(inner.getStateChangesCount());
         for (var stateChangeProto : inner.getStateChangesList()) {
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractInfoQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractInfoQuery.java
index 8d2c25d17..d9ac17337 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractInfoQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractInfoQuery.java
@@ -6,7 +6,7 @@ import com.hedera.hashgraph.sdk.proto.Response;
 import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import com.hedera.hashgraph.sdk.proto.SmartContractServiceGrpc;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.Objects;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/Delayer.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/Delayer.java
index 8dba958c3..623e21b72 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/Delayer.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/Delayer.java
@@ -1,6 +1,6 @@
 package com.hedera.hashgraph.sdk;
 
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.threeten.bp.Duration;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/EntityIdHelper.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/EntityIdHelper.java
index ac7002793..1e3e13128 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/EntityIdHelper.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/EntityIdHelper.java
@@ -1,7 +1,7 @@
 package com.hedera.hashgraph.sdk;
 
 import com.google.errorprone.annotations.Var;
-import java8.lang.FunctionalInterface;
+import java.lang.FunctionalInterface;
 import org.bouncycastle.util.encoders.DecoderException;
 import org.bouncycastle.util.encoders.Hex;
 
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/Executable.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/Executable.java
index 2d2bb1db0..302d7e75a 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/Executable.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/Executable.java
@@ -7,7 +7,7 @@ import io.grpc.MethodDescriptor;
 import io.grpc.Status.Code;
 import io.grpc.StatusRuntimeException;
 import io.grpc.stub.ClientCalls;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.threeten.bp.Duration;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/FileContentsQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/FileContentsQuery.java
index a531bf07b..736f9c095 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/FileContentsQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/FileContentsQuery.java
@@ -7,7 +7,7 @@ import com.hedera.hashgraph.sdk.proto.QueryHeader;
 import com.hedera.hashgraph.sdk.proto.Response;
 import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.Objects;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/FileInfoQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/FileInfoQuery.java
index 52b4f6f73..4b0ef1571 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/FileInfoQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/FileInfoQuery.java
@@ -6,7 +6,7 @@ import com.hedera.hashgraph.sdk.proto.QueryHeader;
 import com.hedera.hashgraph.sdk.proto.Response;
 import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.Objects;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/FutureConverter.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/FutureConverter.java
index b38414da1..77209cbcb 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/FutureConverter.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/FutureConverter.java
@@ -4,8 +4,8 @@ import com.google.common.util.concurrent.FutureCallback;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.MoreExecutors;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.function.Consumer;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.Consumer;
 
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executor;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/Keystore.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/Keystore.java
index 819c11df4..9999342c3 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/Keystore.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/Keystore.java
@@ -6,7 +6,7 @@ import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
 import com.google.gson.JsonSyntaxException;
 import com.google.gson.stream.JsonWriter;
-import java8.util.Optional;
+import java.util.Optional;
 import org.bouncycastle.crypto.params.KeyParameter;
 import org.bouncycastle.util.encoders.Hex;
 
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ManagedNetwork.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ManagedNetwork.java
index 4e81d58a1..fed4a7e92 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ManagedNetwork.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ManagedNetwork.java
@@ -1,7 +1,6 @@
 package com.hedera.hashgraph.sdk;
 
 import com.google.errorprone.annotations.Var;
-import java8.util.Lists;
 import org.threeten.bp.Duration;
 import org.threeten.bp.Instant;
 
@@ -495,7 +494,7 @@ abstract class ManagedNetwork<
             }
         }
 
-        return Lists.copyOf(returnNodes.values());
+        return List.copyOf(returnNodes.values());
     }
 
     /**
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ManagedNode.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ManagedNode.java
index 5b0e28ce7..b44786b05 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ManagedNode.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ManagedNode.java
@@ -8,9 +8,8 @@ import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;
 import io.grpc.TlsChannelCredentials;
 import io.grpc.inprocess.InProcessChannelBuilder;
-import java8.util.Objects;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.concurrent.CompletableFuture;
+import java.util.Objects;
+import java.util.concurrent.CompletableFuture;
 import org.threeten.bp.Duration;
 import org.threeten.bp.Instant;
 
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/MirrorNetwork.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/MirrorNetwork.java
index 27c65f970..900f1469f 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/MirrorNetwork.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/MirrorNetwork.java
@@ -1,7 +1,5 @@
 package com.hedera.hashgraph.sdk;
 
-import java8.util.Lists;
-
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -25,15 +23,15 @@ class MirrorNetwork extends ManagedNetwork<MirrorNetwork, ManagedNodeAddress, Mi
     }
 
     static MirrorNetwork forMainnet(ExecutorService executor) {
-        return new MirrorNetwork(executor, Lists.of("hcs.mainnet.mirrornode.hedera.com:5600"));
+        return new MirrorNetwork(executor, List.of("hcs.mainnet.mirrornode.hedera.com:5600"));
     }
 
     static MirrorNetwork forTestnet(ExecutorService executor) {
-        return new MirrorNetwork(executor, Lists.of("hcs.testnet.mirrornode.hedera.com:5600"));
+        return new MirrorNetwork(executor, List.of("hcs.testnet.mirrornode.hedera.com:5600"));
     }
 
     static MirrorNetwork forPreviewnet(ExecutorService executor) {
-        return new MirrorNetwork(executor, Lists.of("hcs.previewnet.mirrornode.hedera.com:5600"));
+        return new MirrorNetwork(executor, List.of("hcs.previewnet.mirrornode.hedera.com:5600"));
     }
 
     synchronized MirrorNetwork setNetwork(List<String> network) throws TimeoutException, InterruptedException {
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/Query.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/Query.java
index fb8677488..d3684423e 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/Query.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/Query.java
@@ -9,8 +9,8 @@ import com.hedera.hashgraph.sdk.proto.ResponseType;
 import com.hedera.hashgraph.sdk.proto.Transaction;
 import com.hedera.hashgraph.sdk.proto.TransactionBody;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.function.Consumer;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.Consumer;
 import org.threeten.bp.Instant;
 
 import javax.annotation.Nullable;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ScheduleInfoQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ScheduleInfoQuery.java
index 11008b8ac..120415d8b 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ScheduleInfoQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ScheduleInfoQuery.java
@@ -7,7 +7,7 @@ import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import com.hedera.hashgraph.sdk.proto.ScheduleGetInfoQuery;
 import com.hedera.hashgraph.sdk.proto.ScheduleServiceGrpc;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.Objects;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemDeleteTransaction.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemDeleteTransaction.java
index e4ae96092..d1e669650 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemDeleteTransaction.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemDeleteTransaction.java
@@ -8,7 +8,7 @@ import com.hedera.hashgraph.sdk.proto.SystemDeleteTransactionBody;
 import com.hedera.hashgraph.sdk.proto.TransactionBody;
 import com.hedera.hashgraph.sdk.proto.TransactionResponse;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 import org.threeten.bp.Instant;
 
 import javax.annotation.Nullable;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemUndeleteTransaction.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemUndeleteTransaction.java
index 4ec508f56..fa067c32c 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemUndeleteTransaction.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemUndeleteTransaction.java
@@ -8,7 +8,7 @@ import com.hedera.hashgraph.sdk.proto.SystemUndeleteTransactionBody;
 import com.hedera.hashgraph.sdk.proto.TransactionBody;
 import com.hedera.hashgraph.sdk.proto.TransactionResponse;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.LinkedHashMap;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenInfoQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenInfoQuery.java
index c16b4a139..849a62470 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenInfoQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenInfoQuery.java
@@ -7,7 +7,7 @@ import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import com.hedera.hashgraph.sdk.proto.TokenGetInfoQuery;
 import com.hedera.hashgraph.sdk.proto.TokenServiceGrpc;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.Objects;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftInfoQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftInfoQuery.java
index 49d1c9489..cb564d9c4 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftInfoQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftInfoQuery.java
@@ -7,7 +7,7 @@ import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import com.hedera.hashgraph.sdk.proto.TokenGetNftInfoQuery;
 import com.hedera.hashgraph.sdk.proto.TokenServiceGrpc;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nonnegative;
 import javax.annotation.Nullable;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftTransfer.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftTransfer.java
index 3e65dcc41..989ee3083 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftTransfer.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftTransfer.java
@@ -5,7 +5,6 @@ import com.google.protobuf.InvalidProtocolBufferException;
 import com.hedera.hashgraph.sdk.proto.NftTransfer;
 import com.hedera.hashgraph.sdk.proto.TokenID;
 import com.hedera.hashgraph.sdk.proto.TokenTransferList;
-import java8.util.Lists;
 
 import javax.annotation.Nullable;
 import java.util.ArrayList;
@@ -50,7 +49,7 @@ public class TokenNftTransfer implements Comparable<TokenNftTransfer> {
     @Deprecated
     public static TokenNftTransfer fromBytes(byte[] bytes) throws InvalidProtocolBufferException {
         return fromProtobuf(
-            Lists.of(
+            List.of(
                 TokenTransferList.newBuilder()
                     .setToken(TokenID.newBuilder().build())
                     .addNftTransfers(NftTransfer.parseFrom(bytes))
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/TopicMessageQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/TopicMessageQuery.java
index b2ea36164..f93307f9e 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/TopicMessageQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/TopicMessageQuery.java
@@ -12,9 +12,9 @@ import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
 import io.grpc.stub.ClientCalls;
 import io.grpc.stub.StreamObserver;
-import java8.util.function.BiConsumer;
-import java8.util.function.Consumer;
-import java8.util.function.Predicate;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.threeten.bp.Duration;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/Transaction.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/Transaction.java
index 86e46e0f2..f918090a3 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/Transaction.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/Transaction.java
@@ -9,8 +9,8 @@ import com.hedera.hashgraph.sdk.proto.SignaturePair;
 import com.hedera.hashgraph.sdk.proto.SignedTransaction;
 import com.hedera.hashgraph.sdk.proto.TransactionBody;
 import com.hedera.hashgraph.sdk.proto.TransactionList;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.function.Function;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.Function;
 import org.bouncycastle.crypto.digests.SHA384Digest;
 import org.threeten.bp.Duration;
 
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionId.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionId.java
index 94db57057..fc5b1b33b 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionId.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionId.java
@@ -3,7 +3,7 @@ package com.hedera.hashgraph.sdk;
 import com.google.errorprone.annotations.Var;
 import com.google.protobuf.InvalidProtocolBufferException;
 import com.hedera.hashgraph.sdk.proto.TransactionID;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 import org.threeten.bp.Clock;
 import org.threeten.bp.Instant;
 
@@ -11,8 +11,8 @@ import javax.annotation.Nullable;
 import java.util.Objects;
 import java.util.concurrent.TimeoutException;
 
-import static java8.util.concurrent.CompletableFuture.completedFuture;
-import static java8.util.concurrent.CompletableFuture.failedFuture;
+import static java.util.concurrent.CompletableFuture.completedFuture;
+import static java.util.concurrent.CompletableFuture.failedFuture;
 
 /**
  * The client-generated ID for a transaction.
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionResponse.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionResponse.java
index 643e8f954..d1c296cff 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionResponse.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionResponse.java
@@ -1,7 +1,7 @@
 package com.hedera.hashgraph.sdk;
 
 import com.google.common.base.MoreObjects;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 import org.bouncycastle.util.encoders.Hex;
 
 import javax.annotation.Nullable;
diff --git a/sdk/src/test/java/com/hedera/hashgraph/sdk/ContractFunctionParametersTest.java b/sdk/src/test/java/com/hedera/hashgraph/sdk/ContractFunctionParametersTest.java
index c8ff62686..2e7530894 100644
--- a/sdk/src/test/java/com/hedera/hashgraph/sdk/ContractFunctionParametersTest.java
+++ b/sdk/src/test/java/com/hedera/hashgraph/sdk/ContractFunctionParametersTest.java
@@ -1,7 +1,6 @@
 package com.hedera.hashgraph.sdk;
 
 import com.google.protobuf.ByteString;
-import java8.util.Lists;
 import org.bouncycastle.util.encoders.Hex;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.DisplayName;
@@ -20,7 +19,7 @@ import static org.junit.jupiter.api.Assertions.assertThrows;
 public class ContractFunctionParametersTest {
     @SuppressWarnings("unused")
     private static List<Arguments> int256Arguments() {
-        return Lists.of(
+        return List.of(
             Arguments.of(0, "0000000000000000000000000000000000000000000000000000000000000000"),
             Arguments.of(2, "0000000000000000000000000000000000000000000000000000000000000002"),
             Arguments.of(255, "00000000000000000000000000000000000000000000000000000000000000ff"),
@@ -41,7 +40,7 @@ public class ContractFunctionParametersTest {
 
     @SuppressWarnings("unused")
     private static List<Arguments> uInt256Arguments() {
-        return Lists.of(
+        return List.of(
             Arguments.of(0, "0000000000000000000000000000000000000000000000000000000000000000", 8),
             Arguments.of(2, "0000000000000000000000000000000000000000000000000000000000000002", 8),
             Arguments.of(255, "00000000000000000000000000000000000000000000000000000000000000ff", 8),
diff --git a/sdk/src/test/java/com/hedera/hashgraph/sdk/Ed25519PrivateKeyTest.java b/sdk/src/test/java/com/hedera/hashgraph/sdk/Ed25519PrivateKeyTest.java
index eeeefd196..959fb38d1 100644
--- a/sdk/src/test/java/com/hedera/hashgraph/sdk/Ed25519PrivateKeyTest.java
+++ b/sdk/src/test/java/com/hedera/hashgraph/sdk/Ed25519PrivateKeyTest.java
@@ -3,8 +3,8 @@ package com.hedera.hashgraph.sdk;
 //import com.hedera.hashgraph.sdk.BadKeyException;
 //import com.hedera.hashgraph.sdk.Mnemonic;
 
-import java8.util.stream.RefStreams;
-import java8.util.stream.Stream;
+import java.util.stream.RefStreams;
+import java.util.stream.Stream;
 import org.bouncycastle.math.ec.rfc8032.Ed25519;
 import org.bouncycastle.util.encoders.Hex;
 import org.junit.jupiter.api.DisplayName;
diff --git a/sdk/src/test/java/com/hedera/hashgraph/sdk/ExecutableTest.java b/sdk/src/test/java/com/hedera/hashgraph/sdk/ExecutableTest.java
index 10d21ac4c..3958c6266 100644
--- a/sdk/src/test/java/com/hedera/hashgraph/sdk/ExecutableTest.java
+++ b/sdk/src/test/java/com/hedera/hashgraph/sdk/ExecutableTest.java
@@ -6,7 +6,7 @@ import com.hedera.hashgraph.sdk.proto.ResponseCodeEnum;
 import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import io.grpc.MethodDescriptor;
 import io.grpc.StatusRuntimeException;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
diff --git a/sdk/src/test/java/com/hedera/hashgraph/sdk/HbarTest.java b/sdk/src/test/java/com/hedera/hashgraph/sdk/HbarTest.java
index 71aa8c252..ee6650528 100644
--- a/sdk/src/test/java/com/hedera/hashgraph/sdk/HbarTest.java
+++ b/sdk/src/test/java/com/hedera/hashgraph/sdk/HbarTest.java
@@ -1,6 +1,6 @@
 package com.hedera.hashgraph.sdk;
 
-import java8.util.stream.RefStreams;
+import java.util.stream.RefStreams;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;
diff --git a/sdk/src/test/java/com/hedera/hashgraph/sdk/Mocker.java b/sdk/src/test/java/com/hedera/hashgraph/sdk/Mocker.java
index 8bfcbc73a..8f92df514 100644
--- a/sdk/src/test/java/com/hedera/hashgraph/sdk/Mocker.java
+++ b/sdk/src/test/java/com/hedera/hashgraph/sdk/Mocker.java
@@ -9,7 +9,7 @@ import io.grpc.ServiceDescriptor;
 import io.grpc.Status;
 import io.grpc.inprocess.InProcessServerBuilder;
 import io.grpc.stub.ServerCalls;
-import java8.util.function.Function;
+import java.util.function.Function;
 import org.threeten.bp.Duration;
 
 import java.io.IOException;
diff --git a/sdk/src/test/java/com/hedera/hashgraph/sdk/MockingTest.java b/sdk/src/test/java/com/hedera/hashgraph/sdk/MockingTest.java
index bf5a24f01..e5fef6225 100644
--- a/sdk/src/test/java/com/hedera/hashgraph/sdk/MockingTest.java
+++ b/sdk/src/test/java/com/hedera/hashgraph/sdk/MockingTest.java
@@ -19,7 +19,7 @@ import com.hedera.hashgraph.sdk.proto.TransactionResponse;
 import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
 import io.grpc.stub.StreamObserver;
-import java8.util.function.Function;
+import java.util.function.Function;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.DisplayName;
diff --git a/sdk/src/test/java/com/hedera/hashgraph/sdk/RegenerateTransactionIdsTest.java b/sdk/src/test/java/com/hedera/hashgraph/sdk/RegenerateTransactionIdsTest.java
index 89236bb31..b84dfc093 100644
--- a/sdk/src/test/java/com/hedera/hashgraph/sdk/RegenerateTransactionIdsTest.java
+++ b/sdk/src/test/java/com/hedera/hashgraph/sdk/RegenerateTransactionIdsTest.java
@@ -4,7 +4,7 @@ import com.hedera.hashgraph.sdk.proto.*;
 import com.hedera.hashgraph.sdk.proto.Transaction;
 import com.hedera.hashgraph.sdk.proto.TransactionResponse;
 import io.grpc.Status;
-import java8.util.function.Function;
+import java.util.function.Function;
 import org.junit.jupiter.api.Test;
 
 import java.util.HashSet;
diff --git a/sdk/src/test/java/com/hedera/hashgraph/sdk/TopicMessageQueryTest.java b/sdk/src/test/java/com/hedera/hashgraph/sdk/TopicMessageQueryTest.java
index ca1ff1fe7..d7c3c293b 100644
--- a/sdk/src/test/java/com/hedera/hashgraph/sdk/TopicMessageQueryTest.java
+++ b/sdk/src/test/java/com/hedera/hashgraph/sdk/TopicMessageQueryTest.java
@@ -18,7 +18,7 @@ import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
 import io.grpc.inprocess.InProcessServerBuilder;
 import io.grpc.stub.StreamObserver;
-import java8.util.function.Consumer;
+import java.util.function.Consumer;
 import org.apache.commons.lang3.ArrayUtils;
 import org.assertj.core.api.InstanceOfAssertFactories;
 import org.junit.AfterClass;
