diff --git a/build.gradle b/build.gradle
index 8d7ca0392..2f777f410 100644
--- a/build.gradle
+++ b/build.gradle
@@ -17,8 +17,8 @@ allprojects {
     apply plugin: "java"
     apply plugin: "net.ltgt.errorprone"
 
-    sourceCompatibility = 14
-    targetCompatibility = 14
+    sourceCompatibility = 11
+    targetCompatibility = 11
 
     repositories {
         mavenCentral()
diff --git a/examples/build.gradle b/examples/build.gradle
index ec2341434..76f506c88 100644
--- a/examples/build.gradle
+++ b/examples/build.gradle
@@ -10,8 +10,8 @@ dependencies {
 }
 
 java {
-    sourceCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
-    targetCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
+    sourceCompatibility = org.gradle.api.JavaVersion.VERSION_11
+    targetCompatibility = org.gradle.api.JavaVersion.VERSION_11
 }
 
 tasks.addRule("Pattern: run<Example>: Runs an example.") { String taskName ->
diff --git a/examples/src/main/java/TopicWithAdminKeyExample.java b/examples/src/main/java/TopicWithAdminKeyExample.java
index 8f9459789..7e0e08577 100644
--- a/examples/src/main/java/TopicWithAdminKeyExample.java
+++ b/examples/src/main/java/TopicWithAdminKeyExample.java
@@ -31,7 +31,7 @@ import com.hedera.hashgraph.sdk.TopicUpdateTransaction;
 import com.hedera.hashgraph.sdk.Transaction;
 import com.hedera.hashgraph.sdk.TransactionResponse;
 import io.github.cdimascio.dotenv.Dotenv;
-import java8.util.J8Arrays;
+import java.util.Arrays;
 
 import javax.annotation.Nullable;
 import java.util.Collections;
@@ -87,7 +87,7 @@ class TopicWithAdminKeyExample {
         // Generate the initial keys that are part of the adminKey's thresholdKey.
         // 3 ED25519 keys part of a 2-of-3 threshold key.
         initialAdminKeys = new PrivateKey[3];
-        J8Arrays.setAll(initialAdminKeys, i -> PrivateKey.generate());
+        Arrays.setAll(initialAdminKeys, i -> PrivateKey.generate());
 
         KeyList thresholdKey = KeyList.withThreshold(2);
         Collections.addAll(thresholdKey, initialAdminKeys);
@@ -98,7 +98,7 @@ class TopicWithAdminKeyExample {
             .freezeWith(hapiClient);
 
         // Sign the transaction with 2 of 3 keys that are part of the adminKey threshold key.
-        J8Arrays.stream(initialAdminKeys, 0, 2).forEach(k -> {
+        Arrays.stream(initialAdminKeys, 0, 2).forEach(k -> {
             System.out.println("Signing ConsensusTopicCreateTransaction with key " + k);
             transaction.sign(k);
         });
@@ -114,7 +114,7 @@ class TopicWithAdminKeyExample {
         // Generate the new keys that are part of the adminKey's thresholdKey.
         // 4 ED25519 keys part of a 3-of-4 threshold key.
         PrivateKey[] newAdminKeys = new PrivateKey[4];
-        J8Arrays.setAll(newAdminKeys, i -> PrivateKey.generate());
+        Arrays.setAll(newAdminKeys, i -> PrivateKey.generate());
 
         KeyList thresholdKey = KeyList.withThreshold(3);
         Collections.addAll(thresholdKey, newAdminKeys);
@@ -126,13 +126,13 @@ class TopicWithAdminKeyExample {
             .freezeWith(hapiClient);
 
         // Sign with the initial adminKey. 2 of the 3 keys already part of the topic's adminKey.
-        J8Arrays.stream(initialAdminKeys, 0, 2).forEach(k -> {
+        Arrays.stream(initialAdminKeys, 0, 2).forEach(k -> {
             System.out.println("Signing ConsensusTopicUpdateTransaction with initial admin key " + k);
             transaction.sign(k);
         });
 
         // Sign with the new adminKey. 3 of 4 keys already part of the topic's adminKey.
-        J8Arrays.stream(newAdminKeys, 0, 3).forEach(k -> {
+        Arrays.stream(newAdminKeys, 0, 3).forEach(k -> {
             System.out.println("Signing ConsensusTopicUpdateTransaction with new admin key " + k);
             transaction.sign(k);
         });
diff --git a/sdk/build.gradle b/sdk/build.gradle
index bf6547e83..29032912f 100644
--- a/sdk/build.gradle
+++ b/sdk/build.gradle
@@ -45,7 +45,10 @@ dependencies {
 
     implementation "io.grpc:grpc-core:1.53.0"
     implementation "io.grpc:grpc-stub:1.53.0"
-
+ 
+    implementation "org.slf4j:slf4j-nop:2.0.6"
+    implementation "io.grpc:grpc-netty-shaded:1.53.0"
+ 
     implementation "com.google.code.gson:gson:2.10.1"
     implementation 'javax.annotation:javax.annotation-api:1.3.2'
     implementation "com.esaulpaugh:headlong:9.2.0"
@@ -245,3 +248,17 @@ publishing {
 signing {
         sign publishing.publications.mavenJava
 }
+
+task uberJar(type: Jar) {
+    archiveClassifier = 'uber'
+    duplicatesStrategy = DuplicatesStrategy.INCLUDE
+    from sourceSets.main.output
+    dependsOn configurations.runtimeClasspath
+    from {
+        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
+    }{
+        exclude 'META-INF/*.SF'
+        exclude 'META-INF/*.DSA'
+        exclude 'META-INF/*.RSA'
+    }
+}
diff --git a/sdk/jdk7.gradle b/sdk/jdk7.gradle
index 2566ae70a..df5b691cb 100644
--- a/sdk/jdk7.gradle
+++ b/sdk/jdk7.gradle
@@ -18,7 +18,7 @@ tasks.withType(JavaCompile).configureEach {
     compileJava {
         options.compilerArgs += [
                 "--release",
-                "8" // Avoid using Java 12 APIs
+                "11" // Avoid using Java 12 APIs
         ]
     }
 }
diff --git a/sdk/src/integrationTest/java/IntegrationTestEnv.java b/sdk/src/integrationTest/java/IntegrationTestEnv.java
index 18b0433a2..371144562 100644
--- a/sdk/src/integrationTest/java/IntegrationTestEnv.java
+++ b/sdk/src/integrationTest/java/IntegrationTestEnv.java
@@ -12,7 +12,7 @@ import com.hedera.hashgraph.sdk.ReceiptStatusException;
 import com.hedera.hashgraph.sdk.TokenDeleteTransaction;
 import com.hedera.hashgraph.sdk.TokenId;
 import com.hedera.hashgraph.sdk.TransferTransaction;
-import java8.util.function.Function;
+import java.util.function.Function;
 import org.junit.jupiter.api.Assumptions;
 
 import javax.annotation.Nullable;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfo.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfo.java
index 532f85e6c..52fb03838 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfo.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfo.java
@@ -22,8 +22,8 @@ package com.hedera.hashgraph.sdk;
 import com.google.common.base.MoreObjects;
 import com.google.protobuf.InvalidProtocolBufferException;
 import com.hedera.hashgraph.sdk.proto.CryptoGetInfoResponse;
-import java8.util.J8Arrays;
-import java8.util.stream.Collectors;
+import java.util.Arrays;
+import java.util.stream.Collectors;
 import org.threeten.bp.Duration;
 import org.threeten.bp.Instant;
 
@@ -262,7 +262,7 @@ public final class AccountInfo {
             ? AccountId.fromProtobuf(accountInfo.getProxyAccountID())
             : null;
 
-        var liveHashes = J8Arrays.stream(accountInfo.getLiveHashesList().toArray())
+        var liveHashes = Arrays.stream(accountInfo.getLiveHashesList().toArray())
             .map((liveHash) -> LiveHash.fromProtobuf((com.hedera.hashgraph.sdk.proto.LiveHash) liveHash))
             .collect(Collectors.toList());
 
@@ -318,7 +318,7 @@ public final class AccountInfo {
      * @return                          the protobuf object
      */
     CryptoGetInfoResponse.AccountInfo toProtobuf() {
-        var hashes = J8Arrays.stream(liveHashes.toArray())
+        var hashes = Arrays.stream(liveHashes.toArray())
             .map((liveHash) -> ((LiveHash) liveHash).toProtobuf())
             .collect(Collectors.toList());
 
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoFlow.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoFlow.java
index 042a43039..36029223b 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoFlow.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoFlow.java
@@ -19,7 +19,7 @@
  */
 package com.hedera.hashgraph.sdk;
 
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.TimeoutException;
 
 /**
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoQuery.java
index c6368b519..699b23b4f 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/AccountInfoQuery.java
@@ -25,7 +25,7 @@ import com.hedera.hashgraph.sdk.proto.QueryHeader;
 import com.hedera.hashgraph.sdk.proto.Response;
 import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.Objects;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/AddressBookQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/AddressBookQuery.java
index 5daed9b1f..fcedfe31a 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/AddressBookQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/AddressBookQuery.java
@@ -28,7 +28,7 @@ import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
 import io.grpc.stub.ClientCalls;
 import io.grpc.stub.StreamObserver;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.threeten.bp.Duration;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/BaseNode.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/BaseNode.java
index 4dbfe5798..11031b29c 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/BaseNode.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/BaseNode.java
@@ -27,8 +27,8 @@ import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;
 import io.grpc.TlsChannelCredentials;
 import io.grpc.inprocess.InProcessChannelBuilder;
-import java8.util.Objects;
-import java8.util.concurrent.CompletableFuture;
+import java.util.Objects;
+import java.util.concurrent.CompletableFuture;
 import org.threeten.bp.Duration;
 import org.threeten.bp.Instant;
 
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ChunkedTransaction.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ChunkedTransaction.java
index 3f31ddd1c..4fa4b1264 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ChunkedTransaction.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ChunkedTransaction.java
@@ -26,11 +26,11 @@ import com.hedera.hashgraph.sdk.proto.SignatureMap;
 import com.hedera.hashgraph.sdk.proto.SignedTransaction;
 import com.hedera.hashgraph.sdk.proto.TransactionBody;
 import com.hedera.hashgraph.sdk.proto.TransactionID;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.concurrent.CompletionStage;
-import java8.util.function.BiConsumer;
-import java8.util.function.Consumer;
-import java8.util.function.Function;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletionStage;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
+import java.util.function.Function;
 import org.threeten.bp.Duration;
 
 import javax.annotation.Nullable;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/Client.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/Client.java
index f8fce3528..dbc610d3b 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/Client.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/Client.java
@@ -25,11 +25,11 @@ import com.google.gson.Gson;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonParseException;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.concurrent.CompletionStage;
-import java8.util.function.BiConsumer;
-import java8.util.function.Consumer;
-import java8.util.function.Function;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletionStage;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
+import java.util.function.Function;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.threeten.bp.Duration;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ConsumerHelper.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ConsumerHelper.java
index b47194188..2de7ace7b 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ConsumerHelper.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ConsumerHelper.java
@@ -1,9 +1,9 @@
 package com.hedera.hashgraph.sdk;
 
 
-import java8.util.concurrent.CompletableFuture;
-import java8.util.function.BiConsumer;
-import java8.util.function.Consumer;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
 
 
 class ConsumerHelper {
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCallQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCallQuery.java
index 7dc391fe6..d9de0f543 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCallQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCallQuery.java
@@ -26,7 +26,7 @@ import com.hedera.hashgraph.sdk.proto.Response;
 import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import com.hedera.hashgraph.sdk.proto.SmartContractServiceGrpc;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.Arrays;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCreateFlow.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCreateFlow.java
index e87cdc73d..af9afb99b 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCreateFlow.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractCreateFlow.java
@@ -21,10 +21,10 @@ package com.hedera.hashgraph.sdk;
 
 import com.google.protobuf.ByteString;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.function.BiConsumer;
-import java8.util.function.Consumer;
-import java8.util.function.Function;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
+import java.util.function.Function;
 import org.bouncycastle.util.encoders.Hex;
 import org.threeten.bp.Duration;
 
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionParameters.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionParameters.java
index 1840407a1..392a15d52 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionParameters.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionParameters.java
@@ -21,11 +21,10 @@ package com.hedera.hashgraph.sdk;
 
 import com.google.errorprone.annotations.Var;
 import com.google.protobuf.ByteString;
-import java8.util.J8Arrays;
-import java8.util.stream.Collectors;
-import java8.util.stream.IntStream;
-import java8.util.stream.IntStreams;
-import java8.util.stream.Stream;
+import java.util.Arrays;
+import java.util.stream.Collectors;
+import java.util.stream.IntStream;
+import java.util.stream.Stream;
 import org.bouncycastle.util.encoders.DecoderException;
 import org.bouncycastle.util.encoders.Hex;
 
@@ -236,7 +235,7 @@ public final class ContractFunctionParameters {
      * @throws NullPointerException if any value in `strings` is null
      */
     public ContractFunctionParameters addStringArray(String[] strings) {
-        List<ByteString> byteStrings = J8Arrays.stream(strings)
+        List<ByteString> byteStrings = Arrays.stream(strings)
             .map(ContractFunctionParameters::encodeString)
             .collect(Collectors.toList());
 
@@ -266,7 +265,7 @@ public final class ContractFunctionParameters {
      * @return {@code this}
      */
     public ContractFunctionParameters addBytesArray(byte[][] param) {
-        List<ByteString> byteArrays = J8Arrays.stream(param)
+        List<ByteString> byteArrays = Arrays.stream(param)
             .map(ContractFunctionParameters::encodeBytes)
             .collect(Collectors.toList());
 
@@ -301,7 +300,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addBytes32Array(byte[][] param) {
         // array of fixed-size elements
-        Stream<ByteString> byteArrays = J8Arrays.stream(param)
+        Stream<ByteString> byteArrays = Arrays.stream(param)
             .map(ContractFunctionParameters::encodeBytes32);
 
         args.add(new Argument("bytes32[]", encodeArray(byteArrays), true));
@@ -716,7 +715,7 @@ public final class ContractFunctionParameters {
      * @return {@code this}
      */
     public ContractFunctionParameters addInt8Array(byte[] intArray) {
-        IntStream intStream = IntStreams.range(0, intArray.length).map(idx -> intArray[idx]);
+        IntStream intStream = IntStream.range(0, intArray.length).map(idx -> intArray[idx]);
 
         @Var ByteString arrayBytes = ByteString.copyFrom(
             intStream.mapToObj(i -> int256(i, 8))
@@ -737,7 +736,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt16Array(int[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> int256(i, 16))
+            Arrays.stream(intArray).mapToObj(i -> int256(i, 16))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -755,7 +754,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt24Array(int[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> int256(i, 24))
+            Arrays.stream(intArray).mapToObj(i -> int256(i, 24))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -773,7 +772,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt32Array(int[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> int256(i, 32))
+            Arrays.stream(intArray).mapToObj(i -> int256(i, 32))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -791,7 +790,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt40Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> int256(i, 40))
+            Arrays.stream(intArray).mapToObj(i -> int256(i, 40))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -809,7 +808,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt48Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> int256(i, 48))
+            Arrays.stream(intArray).mapToObj(i -> int256(i, 48))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -827,7 +826,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt56Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> int256(i, 56))
+            Arrays.stream(intArray).mapToObj(i -> int256(i, 56))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -845,7 +844,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt64Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> int256(i, 64))
+            Arrays.stream(intArray).mapToObj(i -> int256(i, 64))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -863,7 +862,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt72Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 72))
+            Arrays.stream(intArray).map(i -> int256(i, 72))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -881,7 +880,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt80Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 80))
+            Arrays.stream(intArray).map(i -> int256(i, 80))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -899,7 +898,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt88Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 88))
+            Arrays.stream(intArray).map(i -> int256(i, 88))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -917,7 +916,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt96Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 96))
+            Arrays.stream(intArray).map(i -> int256(i, 96))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -935,7 +934,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt104Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 104))
+            Arrays.stream(intArray).map(i -> int256(i, 104))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -953,7 +952,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt112Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 112))
+            Arrays.stream(intArray).map(i -> int256(i, 112))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -971,7 +970,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt120Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 120))
+            Arrays.stream(intArray).map(i -> int256(i, 120))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -989,7 +988,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt128Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 128))
+            Arrays.stream(intArray).map(i -> int256(i, 128))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1007,7 +1006,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt136Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 136))
+            Arrays.stream(intArray).map(i -> int256(i, 136))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1025,7 +1024,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt144Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 144))
+            Arrays.stream(intArray).map(i -> int256(i, 144))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1043,7 +1042,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt152Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 152))
+            Arrays.stream(intArray).map(i -> int256(i, 152))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1061,7 +1060,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt160Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 160))
+            Arrays.stream(intArray).map(i -> int256(i, 160))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1079,7 +1078,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt168Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 168))
+            Arrays.stream(intArray).map(i -> int256(i, 168))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1097,7 +1096,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt176Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 176))
+            Arrays.stream(intArray).map(i -> int256(i, 176))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1115,7 +1114,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt184Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 184))
+            Arrays.stream(intArray).map(i -> int256(i, 184))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1133,7 +1132,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt192Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 192))
+            Arrays.stream(intArray).map(i -> int256(i, 192))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1151,7 +1150,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt200Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 200))
+            Arrays.stream(intArray).map(i -> int256(i, 200))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1169,7 +1168,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt208Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 208))
+            Arrays.stream(intArray).map(i -> int256(i, 208))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1187,7 +1186,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt216Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 216))
+            Arrays.stream(intArray).map(i -> int256(i, 216))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1205,7 +1204,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt224Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 224))
+            Arrays.stream(intArray).map(i -> int256(i, 224))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1223,7 +1222,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt232Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 232))
+            Arrays.stream(intArray).map(i -> int256(i, 232))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1241,7 +1240,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt240Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 240))
+            Arrays.stream(intArray).map(i -> int256(i, 240))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1259,7 +1258,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt248Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 248))
+            Arrays.stream(intArray).map(i -> int256(i, 248))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1277,7 +1276,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addInt256Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> int256(i, 256))
+            Arrays.stream(intArray).map(i -> int256(i, 256))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1799,7 +1798,7 @@ public final class ContractFunctionParameters {
      * @return {@code this}
      */
     public ContractFunctionParameters addUint8Array(byte[] intArray) {
-        IntStream intStream = IntStreams.range(0, intArray.length).map(idx -> intArray[idx]);
+        IntStream intStream = IntStream.range(0, intArray.length).map(idx -> intArray[idx]);
 
         @Var ByteString arrayBytes = ByteString.copyFrom(
             intStream.mapToObj(i -> uint256(i, 8))
@@ -1823,7 +1822,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint16Array(int[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> uint256(i, 16))
+            Arrays.stream(intArray).mapToObj(i -> uint256(i, 16))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1844,7 +1843,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint24Array(int[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> uint256(i, 24))
+            Arrays.stream(intArray).mapToObj(i -> uint256(i, 24))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1865,7 +1864,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint32Array(int[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> uint256(i, 32))
+            Arrays.stream(intArray).mapToObj(i -> uint256(i, 32))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1886,7 +1885,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint40Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> uint256(i, 40))
+            Arrays.stream(intArray).mapToObj(i -> uint256(i, 40))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1907,7 +1906,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint48Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> uint256(i, 48))
+            Arrays.stream(intArray).mapToObj(i -> uint256(i, 48))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1928,7 +1927,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint56Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> uint256(i, 56))
+            Arrays.stream(intArray).mapToObj(i -> uint256(i, 56))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1949,7 +1948,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint64Array(long[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).mapToObj(i -> uint256(i, 64))
+            Arrays.stream(intArray).mapToObj(i -> uint256(i, 64))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1971,7 +1970,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint72Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 72))
+            Arrays.stream(intArray).map(i -> uint256(i, 72))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -1993,7 +1992,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint80Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 80))
+            Arrays.stream(intArray).map(i -> uint256(i, 80))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2015,7 +2014,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint88Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 88))
+            Arrays.stream(intArray).map(i -> uint256(i, 88))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2037,7 +2036,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint96Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 96))
+            Arrays.stream(intArray).map(i -> uint256(i, 96))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2059,7 +2058,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint104Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 104))
+            Arrays.stream(intArray).map(i -> uint256(i, 104))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2081,7 +2080,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint112Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 112))
+            Arrays.stream(intArray).map(i -> uint256(i, 112))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2103,7 +2102,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint120Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 120))
+            Arrays.stream(intArray).map(i -> uint256(i, 120))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2125,7 +2124,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint128Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 128))
+            Arrays.stream(intArray).map(i -> uint256(i, 128))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2147,7 +2146,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint136Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 136))
+            Arrays.stream(intArray).map(i -> uint256(i, 136))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2169,7 +2168,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint144Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 144))
+            Arrays.stream(intArray).map(i -> uint256(i, 144))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2191,7 +2190,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint152Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 152))
+            Arrays.stream(intArray).map(i -> uint256(i, 152))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2213,7 +2212,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint160Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 160))
+            Arrays.stream(intArray).map(i -> uint256(i, 160))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2235,7 +2234,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint168Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 168))
+            Arrays.stream(intArray).map(i -> uint256(i, 168))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2257,7 +2256,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint176Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 176))
+            Arrays.stream(intArray).map(i -> uint256(i, 176))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2279,7 +2278,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint184Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 184))
+            Arrays.stream(intArray).map(i -> uint256(i, 184))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2301,7 +2300,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint192Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 192))
+            Arrays.stream(intArray).map(i -> uint256(i, 192))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2323,7 +2322,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint200Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 200))
+            Arrays.stream(intArray).map(i -> uint256(i, 200))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2345,7 +2344,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint208Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 208))
+            Arrays.stream(intArray).map(i -> uint256(i, 208))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2367,7 +2366,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint216Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 216))
+            Arrays.stream(intArray).map(i -> uint256(i, 216))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2389,7 +2388,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint224Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 224))
+            Arrays.stream(intArray).map(i -> uint256(i, 224))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2411,7 +2410,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint232Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 232))
+            Arrays.stream(intArray).map(i -> uint256(i, 232))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2433,7 +2432,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint240Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 240))
+            Arrays.stream(intArray).map(i -> uint256(i, 240))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2455,7 +2454,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint248Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 248))
+            Arrays.stream(intArray).map(i -> uint256(i, 248))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2477,7 +2476,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addUint256Array(BigInteger[] intArray) {
         @Var ByteString arrayBytes = ByteString.copyFrom(
-            J8Arrays.stream(intArray).map(i -> uint256(i, 256))
+            Arrays.stream(intArray).map(i -> uint256(i, 256))
                 .collect(Collectors.toList()));
 
         arrayBytes = uint256(intArray.length, 32).concat(arrayBytes);
@@ -2519,7 +2518,7 @@ public final class ContractFunctionParameters {
      */
     public ContractFunctionParameters addAddressArray(String[] addresses) {
         ByteString addressArray = encodeArray(
-            J8Arrays.stream(addresses).map(a -> {
+            Arrays.stream(addresses).map(a -> {
                 byte[] address = decodeAddress(a);
                 return leftPad32(ByteString.copyFrom(address));
             }));
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionResult.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionResult.java
index 4a4447e3f..df4de81b4 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionResult.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractFunctionResult.java
@@ -23,8 +23,8 @@ import com.google.common.base.MoreObjects;
 import com.google.protobuf.ByteString;
 import com.google.protobuf.BytesValue;
 import com.hedera.hashgraph.sdk.proto.ContractFunctionResultOrBuilder;
-import java8.util.stream.Collectors;
-import java8.util.stream.StreamSupport;
+import java.util.stream.Collectors;
+import java.util.stream.StreamSupport;
 import org.bouncycastle.util.encoders.Hex;
 
 import javax.annotation.Nullable;
@@ -149,9 +149,9 @@ public final class ContractFunctionResult {
 
         gasUsed = inner.getGasUsed();
 
-        logs = StreamSupport.stream(inner.getLogInfoList()).map(ContractLogInfo::fromProtobuf).collect(Collectors.toList());
+        logs = StreamSupport.stream(inner.getLogInfoList().spliterator(), false).map(ContractLogInfo::fromProtobuf).collect(Collectors.toList());
 
-        createdContractIds = StreamSupport.stream(inner.getCreatedContractIDsList()).map(ContractId::fromProtobuf).collect(Collectors.toList());
+        createdContractIds = StreamSupport.stream(inner.getCreatedContractIDsList().spliterator(), false).map(ContractId::fromProtobuf).collect(Collectors.toList());
 
         stateChanges = new ArrayList<ContractStateChange>();
         // for (var stateChangeProto : inner.getStateChangesList()) {
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractInfoQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractInfoQuery.java
index d92b0df06..25fa517a1 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractInfoQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ContractInfoQuery.java
@@ -25,7 +25,7 @@ import com.hedera.hashgraph.sdk.proto.Response;
 import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import com.hedera.hashgraph.sdk.proto.SmartContractServiceGrpc;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.Objects;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/Delayer.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/Delayer.java
index a6901bcf5..fbafbeaac 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/Delayer.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/Delayer.java
@@ -19,7 +19,7 @@
  */
 package com.hedera.hashgraph.sdk;
 
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.threeten.bp.Duration;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/EntityIdHelper.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/EntityIdHelper.java
index 1c67c7dca..724a2bef5 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/EntityIdHelper.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/EntityIdHelper.java
@@ -20,7 +20,7 @@
 package com.hedera.hashgraph.sdk;
 
 import com.google.errorprone.annotations.Var;
-import java8.lang.FunctionalInterface;
+import java.lang.FunctionalInterface;
 import org.bouncycastle.util.encoders.DecoderException;
 import org.bouncycastle.util.encoders.Hex;
 
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/EthereumFlow.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/EthereumFlow.java
index cd65bddee..317a8b44e 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/EthereumFlow.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/EthereumFlow.java
@@ -2,9 +2,9 @@ package com.hedera.hashgraph.sdk;
 
 import java.util.Arrays;
 
-import java8.util.concurrent.CompletableFuture;
-import java8.util.function.BiConsumer;
-import java8.util.function.Consumer;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
 import org.threeten.bp.Duration;
 
 import java.util.concurrent.TimeoutException;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/EthereumTransactionDataEip1559.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/EthereumTransactionDataEip1559.java
index f6ce35bdd..d845d98d7 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/EthereumTransactionDataEip1559.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/EthereumTransactionDataEip1559.java
@@ -5,7 +5,6 @@ import com.esaulpaugh.headlong.rlp.RLPEncoder;
 import com.esaulpaugh.headlong.rlp.RLPItem;
 import com.esaulpaugh.headlong.util.Integers;
 import com.google.common.base.MoreObjects;
-import java8.util.Lists;
 import org.bouncycastle.util.encoders.Hex;
 
 import java.util.ArrayList;
@@ -143,7 +142,7 @@ public class EthereumTransactionDataEip1559 extends EthereumTransactionData {
     }
 
     public byte[] toBytes() {
-        return RLPEncoder.sequence(Integers.toBytes(0x02), Lists.of(
+        return RLPEncoder.sequence(Integers.toBytes(0x02), List.of(
             chainId, nonce, maxPriorityGas, maxGas, gasLimit, to,
             value, callData, new ArrayList<String>(), recoveryId, r, s
         ));
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/Executable.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/Executable.java
index 398ddf82c..9013ae3ba 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/Executable.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/Executable.java
@@ -27,9 +27,9 @@ import io.grpc.MethodDescriptor;
 import io.grpc.Status.Code;
 import io.grpc.StatusRuntimeException;
 import io.grpc.stub.ClientCalls;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.function.BiConsumer;
-import java8.util.function.Consumer;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
 import org.bouncycastle.util.encoders.Hex;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -108,8 +108,8 @@ abstract class Executable<SdkRequestT, ProtoRequestT extends MessageLite, Respon
      * The timeout for each execution attempt
      */
     protected Duration grpcDeadline;
-    private java8.util.function.Function<ProtoRequestT, ProtoRequestT> requestListener;
-    private java8.util.function.Function<ResponseT, ResponseT> responseListener;
+    private java.util.function.Function<ProtoRequestT, ProtoRequestT> requestListener;
+    private java.util.function.Function<ResponseT, ResponseT> responseListener;
 
     Executable() {
         requestListener = request -> {
@@ -289,7 +289,7 @@ abstract class Executable<SdkRequestT, ProtoRequestT extends MessageLite, Respon
      * @param requestListener The callback to use
      * @return {@code this}
      */
-    public final SdkRequestT setRequestListener(java8.util.function.Function<ProtoRequestT, ProtoRequestT> requestListener) {
+    public final SdkRequestT setRequestListener(java.util.function.Function<ProtoRequestT, ProtoRequestT> requestListener) {
         this.requestListener = Objects.requireNonNull(requestListener);
         return (SdkRequestT) this;
     }
@@ -303,7 +303,7 @@ abstract class Executable<SdkRequestT, ProtoRequestT extends MessageLite, Respon
      * @param responseListener The callback to use
      * @return {@code this}
      */
-    public final SdkRequestT setResponseListener(java8.util.function.Function<ResponseT, ResponseT> responseListener) {
+    public final SdkRequestT setResponseListener(java.util.function.Function<ResponseT, ResponseT> responseListener) {
         this.responseListener = Objects.requireNonNull(responseListener);
         return (SdkRequestT) this;
     }
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/FileContentsQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/FileContentsQuery.java
index 4384258a4..98dfdaf8a 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/FileContentsQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/FileContentsQuery.java
@@ -26,7 +26,7 @@ import com.hedera.hashgraph.sdk.proto.QueryHeader;
 import com.hedera.hashgraph.sdk.proto.Response;
 import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.Objects;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/FileInfoQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/FileInfoQuery.java
index dd0bd3ce4..dc577b434 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/FileInfoQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/FileInfoQuery.java
@@ -25,7 +25,7 @@ import com.hedera.hashgraph.sdk.proto.QueryHeader;
 import com.hedera.hashgraph.sdk.proto.Response;
 import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.Objects;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/FutureConverter.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/FutureConverter.java
index 5ee65e08e..b45978852 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/FutureConverter.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/FutureConverter.java
@@ -23,8 +23,8 @@ import com.google.common.util.concurrent.FutureCallback;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.MoreExecutors;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.function.Consumer;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.Consumer;
 
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executor;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/Keystore.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/Keystore.java
index c3fb6a4de..e245cecfe 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/Keystore.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/Keystore.java
@@ -26,7 +26,7 @@ import com.google.gson.JsonParser;
 import com.google.gson.JsonSyntaxException;
 import com.google.gson.stream.JsonWriter;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import java8.util.Optional;
+import java.util.Optional;
 import org.bouncycastle.crypto.params.KeyParameter;
 import org.bouncycastle.util.encoders.Hex;
 
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/MirrorNetwork.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/MirrorNetwork.java
index 571f7d894..c900bc0ab 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/MirrorNetwork.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/MirrorNetwork.java
@@ -19,8 +19,6 @@
  */
 package com.hedera.hashgraph.sdk;
 
-import java8.util.Lists;
-
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -60,7 +58,7 @@ class MirrorNetwork extends BaseNetwork<MirrorNetwork, BaseNodeAddress, MirrorNo
      * @return                          the new mirror network for mainnet
      */
     static MirrorNetwork forMainnet(ExecutorService executor) {
-        return new MirrorNetwork(executor, Lists.of("mainnet-public.mirrornode.hedera.com:443"));
+        return new MirrorNetwork(executor, List.of("mainnet-public.mirrornode.hedera.com:443"));
     }
 
     /**
@@ -70,7 +68,7 @@ class MirrorNetwork extends BaseNetwork<MirrorNetwork, BaseNodeAddress, MirrorNo
      * @return                          the new mirror network for testnet
      */
     static MirrorNetwork forTestnet(ExecutorService executor) {
-        return new MirrorNetwork(executor, Lists.of("testnet.mirrornode.hedera.com:443"));
+        return new MirrorNetwork(executor, List.of("testnet.mirrornode.hedera.com:443"));
     }
 
     /**
@@ -80,7 +78,7 @@ class MirrorNetwork extends BaseNetwork<MirrorNetwork, BaseNodeAddress, MirrorNo
      * @return                          the new mirror network for previewnet
      */
     static MirrorNetwork forPreviewnet(ExecutorService executor) {
-        return new MirrorNetwork(executor, Lists.of("previewnet.mirrornode.hedera.com:443"));
+        return new MirrorNetwork(executor, List.of("previewnet.mirrornode.hedera.com:443"));
     }
 
     /**
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/Query.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/Query.java
index ad6ebb58c..9981d3c3e 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/Query.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/Query.java
@@ -28,9 +28,9 @@ import com.hedera.hashgraph.sdk.proto.ResponseType;
 import com.hedera.hashgraph.sdk.proto.Transaction;
 import com.hedera.hashgraph.sdk.proto.TransactionBody;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.function.BiConsumer;
-import java8.util.function.Consumer;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
 import org.threeten.bp.Duration;
 import org.threeten.bp.Instant;
 
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/ScheduleInfoQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/ScheduleInfoQuery.java
index c92568ea4..c6594aa26 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/ScheduleInfoQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/ScheduleInfoQuery.java
@@ -26,7 +26,7 @@ import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import com.hedera.hashgraph.sdk.proto.ScheduleGetInfoQuery;
 import com.hedera.hashgraph.sdk.proto.ScheduleServiceGrpc;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.Objects;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemDeleteTransaction.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemDeleteTransaction.java
index 8d652a29d..a43c7f797 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemDeleteTransaction.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemDeleteTransaction.java
@@ -28,7 +28,7 @@ import com.hedera.hashgraph.sdk.proto.TransactionBody;
 import com.hedera.hashgraph.sdk.proto.TransactionResponse;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 import org.threeten.bp.Instant;
 
 import javax.annotation.Nullable;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemUndeleteTransaction.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemUndeleteTransaction.java
index adbe02f2f..cb7ce556d 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemUndeleteTransaction.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/SystemUndeleteTransaction.java
@@ -27,7 +27,7 @@ import com.hedera.hashgraph.sdk.proto.SystemUndeleteTransactionBody;
 import com.hedera.hashgraph.sdk.proto.TransactionBody;
 import com.hedera.hashgraph.sdk.proto.TransactionResponse;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.LinkedHashMap;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenInfoQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenInfoQuery.java
index a36163d98..2d942c6f9 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenInfoQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenInfoQuery.java
@@ -26,7 +26,7 @@ import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import com.hedera.hashgraph.sdk.proto.TokenGetInfoQuery;
 import com.hedera.hashgraph.sdk.proto.TokenServiceGrpc;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nullable;
 import java.util.Objects;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftInfoQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftInfoQuery.java
index b5edcc093..aca6497bf 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftInfoQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftInfoQuery.java
@@ -26,7 +26,7 @@ import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import com.hedera.hashgraph.sdk.proto.TokenGetNftInfoQuery;
 import com.hedera.hashgraph.sdk.proto.TokenServiceGrpc;
 import io.grpc.MethodDescriptor;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 
 import javax.annotation.Nonnegative;
 import javax.annotation.Nullable;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftTransfer.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftTransfer.java
index c280642b0..4530a57e6 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftTransfer.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/TokenNftTransfer.java
@@ -24,7 +24,6 @@ import com.google.protobuf.InvalidProtocolBufferException;
 import com.hedera.hashgraph.sdk.proto.NftTransfer;
 import com.hedera.hashgraph.sdk.proto.TokenID;
 import com.hedera.hashgraph.sdk.proto.TokenTransferList;
-import java8.util.Lists;
 
 import javax.annotation.Nullable;
 import java.util.ArrayList;
@@ -110,7 +109,7 @@ public class TokenNftTransfer implements Comparable<TokenNftTransfer> {
     @Deprecated
     public static TokenNftTransfer fromBytes(byte[] bytes) throws InvalidProtocolBufferException {
         return fromProtobuf(
-            Lists.of(
+            List.of(
                 TokenTransferList.newBuilder()
                     .setToken(TokenID.newBuilder().build())
                     .addNftTransfers(NftTransfer.parseFrom(bytes))
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/TopicMessageQuery.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/TopicMessageQuery.java
index 20f95c640..25db86583 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/TopicMessageQuery.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/TopicMessageQuery.java
@@ -32,9 +32,9 @@ import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
 import io.grpc.stub.ClientCalls;
 import io.grpc.stub.StreamObserver;
-import java8.util.function.BiConsumer;
-import java8.util.function.Consumer;
-import java8.util.function.Predicate;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.threeten.bp.Duration;
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/Transaction.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/Transaction.java
index 2462f324d..c3b9fe889 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/Transaction.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/Transaction.java
@@ -29,8 +29,8 @@ import com.hedera.hashgraph.sdk.proto.SignedTransaction;
 import com.hedera.hashgraph.sdk.proto.TransactionBody;
 import com.hedera.hashgraph.sdk.proto.TransactionList;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.function.Function;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.Function;
 import org.bouncycastle.crypto.digests.SHA384Digest;
 import org.threeten.bp.Duration;
 
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionId.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionId.java
index a128b443c..714c4db44 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionId.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionId.java
@@ -22,9 +22,9 @@ package com.hedera.hashgraph.sdk;
 import com.google.errorprone.annotations.Var;
 import com.google.protobuf.InvalidProtocolBufferException;
 import com.hedera.hashgraph.sdk.proto.TransactionID;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.function.BiConsumer;
-import java8.util.function.Consumer;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
 import org.threeten.bp.Clock;
 import org.threeten.bp.Duration;
 import org.threeten.bp.Instant;
@@ -34,8 +34,8 @@ import java.util.Objects;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
-import static java8.util.concurrent.CompletableFuture.completedFuture;
-import static java8.util.concurrent.CompletableFuture.failedFuture;
+import static java.util.concurrent.CompletableFuture.completedFuture;
+import static java.util.concurrent.CompletableFuture.failedFuture;
 
 /**
  * The client-generated ID for a transaction.
diff --git a/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionResponse.java b/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionResponse.java
index d3af27223..e143c7b66 100644
--- a/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionResponse.java
+++ b/sdk/src/main/java/com/hedera/hashgraph/sdk/TransactionResponse.java
@@ -20,9 +20,9 @@
 package com.hedera.hashgraph.sdk;
 
 import com.google.common.base.MoreObjects;
-import java8.util.concurrent.CompletableFuture;
-import java8.util.function.BiConsumer;
-import java8.util.function.Consumer;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
 import org.bouncycastle.util.encoders.Hex;
 import org.threeten.bp.Duration;
 
diff --git a/sdk/src/test/java/com/hedera/hashgraph/sdk/ContractFunctionParametersTest.java b/sdk/src/test/java/com/hedera/hashgraph/sdk/ContractFunctionParametersTest.java
index 7422d7c7a..b6aeb983a 100644
--- a/sdk/src/test/java/com/hedera/hashgraph/sdk/ContractFunctionParametersTest.java
+++ b/sdk/src/test/java/com/hedera/hashgraph/sdk/ContractFunctionParametersTest.java
@@ -55,7 +55,7 @@ public class ContractFunctionParametersTest {
 
     @SuppressWarnings("unused")
     private static List<Arguments> int256Arguments() {
-        return Lists.of(
+        return List.of(
             Arguments.of(0, "0000000000000000000000000000000000000000000000000000000000000000"),
             Arguments.of(2, "0000000000000000000000000000000000000000000000000000000000000002"),
             Arguments.of(255, "00000000000000000000000000000000000000000000000000000000000000ff"),
@@ -76,7 +76,7 @@ public class ContractFunctionParametersTest {
 
     @SuppressWarnings("unused")
     private static List<Arguments> uInt256Arguments() {
-        return Lists.of(
+        return List.of(
             Arguments.of(0, "0000000000000000000000000000000000000000000000000000000000000000", 8),
             Arguments.of(2, "0000000000000000000000000000000000000000000000000000000000000002", 8),
             Arguments.of(255, "00000000000000000000000000000000000000000000000000000000000000ff", 8),
diff --git a/sdk/src/test/java/com/hedera/hashgraph/sdk/Ed25519PrivateKeyTest.java b/sdk/src/test/java/com/hedera/hashgraph/sdk/Ed25519PrivateKeyTest.java
index c0e1ffeee..b7f4476d0 100644
--- a/sdk/src/test/java/com/hedera/hashgraph/sdk/Ed25519PrivateKeyTest.java
+++ b/sdk/src/test/java/com/hedera/hashgraph/sdk/Ed25519PrivateKeyTest.java
@@ -22,8 +22,8 @@ package com.hedera.hashgraph.sdk;
 //import com.hedera.hashgraph.sdk.BadKeyException;
 //import com.hedera.hashgraph.sdk.Mnemonic;
 
-import java8.util.stream.RefStreams;
-import java8.util.stream.Stream;
+import java.util.stream.RefStreams;
+import java.util.stream.Stream;
 import org.bouncycastle.math.ec.rfc8032.Ed25519;
 import org.bouncycastle.util.encoders.Hex;
 import org.junit.jupiter.api.DisplayName;
diff --git a/sdk/src/test/java/com/hedera/hashgraph/sdk/ExecutableTest.java b/sdk/src/test/java/com/hedera/hashgraph/sdk/ExecutableTest.java
index 18bdfdab8..08e7d54bf 100644
--- a/sdk/src/test/java/com/hedera/hashgraph/sdk/ExecutableTest.java
+++ b/sdk/src/test/java/com/hedera/hashgraph/sdk/ExecutableTest.java
@@ -26,7 +26,7 @@ import com.hedera.hashgraph.sdk.proto.ResponseHeader;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.grpc.MethodDescriptor;
 import io.grpc.StatusRuntimeException;
-import java8.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletableFuture;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.stubbing.Answer;
diff --git a/sdk/src/test/java/com/hedera/hashgraph/sdk/HbarTest.java b/sdk/src/test/java/com/hedera/hashgraph/sdk/HbarTest.java
index 0f85b6304..b43955877 100644
--- a/sdk/src/test/java/com/hedera/hashgraph/sdk/HbarTest.java
+++ b/sdk/src/test/java/com/hedera/hashgraph/sdk/HbarTest.java
@@ -19,7 +19,7 @@
  */
 package com.hedera.hashgraph.sdk;
 
-import java8.util.stream.RefStreams;
+import java.util.stream.RefStreams;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;
diff --git a/sdk/src/test/java/com/hedera/hashgraph/sdk/TopicMessageQueryTest.java b/sdk/src/test/java/com/hedera/hashgraph/sdk/TopicMessageQueryTest.java
index 41cfdd138..3a4233a05 100644
--- a/sdk/src/test/java/com/hedera/hashgraph/sdk/TopicMessageQueryTest.java
+++ b/sdk/src/test/java/com/hedera/hashgraph/sdk/TopicMessageQueryTest.java
@@ -37,7 +37,7 @@ import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
 import io.grpc.inprocess.InProcessServerBuilder;
 import io.grpc.stub.StreamObserver;
-import java8.util.function.Consumer;
+import java.util.function.Consumer;
 import org.apache.commons.lang3.ArrayUtils;
 import org.assertj.core.api.InstanceOfAssertFactories;
 import org.junit.AfterClass;
